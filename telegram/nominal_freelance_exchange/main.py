import json
import random
import sqlite3

import telebot
from telebot import types

bot = telebot.TeleBot('–¢–û–ö–ï–ù')


@bot.message_handler(commands=['start'])
@bot.message_handler(content_types=['–ú–µ–Ω—é üëâüèø'])
@bot.message_handler(content_types=['–ù–∞–∑–∞–¥ üëâüèø'])
def get_command_start(message):
    """–ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–¥"""
    conn = sqlite3.connect("nominal.sqlite")
    cursor = conn.cursor()
    res_1 = cursor.execute(
        f'''SELECT * FROM users WHERE id_tg="{message.from_user.id}"''').fetchone()
    res_2 = cursor.execute(
        f'''SELECT * FROM rating WHERE id_tg="{message.from_user.id}"''').fetchone()
    res_3 = cursor.execute(
        f'''SELECT my_orders FROM orders WHERE id_tg="{message.from_user.id}"''').fetchone()
    res_4 = cursor.execute(
        f'''SELECT completed_orders FROM orders WHERE id_tg="{message.from_user.id}"''').fetchone()
    if res_1 is None:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add('English üéÉ', 'Russian ü§ñ')
        bot.send_message(message.from_user.id, 'Choice your language', reply_markup=keyboard)
        bot.register_next_step_handler(message, send_privacy_policy)
    else:
        keyboard = types.InlineKeyboardMarkup()
        key_take = types.InlineKeyboardButton(text='–í–∑—è—Ç—å –∑–∞–∫–∞–∑', callback_data='take_order')
        key_my = types.InlineKeyboardButton(text='–ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data='my_orders')
        key_rating = types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞',
                                                callback_data='my_rating')
        keyboard.add(key_take, key_my)
        keyboard.add(key_rating)
        """
        —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ —Å–µ–π—á–∞—Å –Ω–∞—à–∏—Ö
        """
        print(res_3)
        if res_3 is None:
            my_orders_on_exchange = '0'
        else:
            my_orders_on_exchange = len(res_3)
        """
        —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞—à–∏—Ö
        """
        print(res_4)
        if res_4 is None:
            my_completed_orders = '0'
        else:
            my_completed_orders = len(res_4)
        text = f'‚ö°Ô∏è–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {res_1[2]} {res_1[1]} ‚ö°\nüî•–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ - {res_2[1]} ‚≠ê\nüôÄ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ - {my_completed_orders}\nüéÉ –í–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ - {my_orders_on_exchange}\nü§Ø –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ –±–∏—Ä–∂–µ - {random.randint(14, 49)}'
        bot.send_message(message.from_user.id, text, reply_markup=keyboard)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add('–ú–µ–Ω—é üëâüèø')
        keyboard.add('–ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫—É ü§ñ')
        bot.send_message(message.from_user.id, '–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç', reply_markup=keyboard)

"""
–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
"""
def send_privacy_policy(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.text == 'English üéÉ':
        keyboard.add('I do not accept ‚ùå', 'I accept ‚úÖ')
        bot.send_document(message.from_user.id, open('en/privacy_policy.docx', 'rb'),
                          reply_markup=keyboard)
    elif message.text == 'Russian ü§ñ':
        keyboard.add('–ù–µ –ø—Ä–∏–Ω–∏–º–∞—é ‚ùå', '–ü—Ä–∏–Ω–∏–º–∞—é ‚úÖ')
        bot.send_document(message.from_user.id, open('ru/privacy_policy.docx', 'rb'),
                          reply_markup=keyboard)


"""
–ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
"""


def create_ask_phone(language):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if language == 'ru':
        key = types.KeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚úÖ', request_contact=True)
        markup.add(key)
    elif language == 'en':
        key = types.KeyboardButton('Share my phone ‚úÖ', request_contact=True)
        markup.add(key)
    return markup


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == '–ü—Ä–∏–Ω–∏–º–∞—é ‚úÖ':
        bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç! –î–µ–ª–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º :>',
                         reply_markup=create_ask_phone('ru'))
    elif message.text == 'I accept ‚úÖ':
        bot.send_message(message.from_user.id, 'Hi! Can you send me your contact? :>',
                         reply_markup=create_ask_phone('en'))
    elif message.text == '–û–±–∂–∞–ª–æ–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ ü§ñ':
        """
        –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        """
        bot.send_message(message.from_user.id, '–ù–∞—à –∞–¥–º–∏–Ω - @knQzx')
    elif message.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ üéÉ':
        """
        –ø–æ–ª–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —Ç–µ–º—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        """
        conn = sqlite3.connect("nominal.sqlite")
        cursor = conn.cursor()
        my_ord = cursor.execute(
            f'''SELECT my_orders FROM orders WHERE id_tg="{message.from_user.id}"''').fetchone()
        json_data = json.loads(my_ord[0])
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        i = 1
        for theme in json_data:
            keyboard.add(f'Theme {i} - {theme}')
            i += 1
        keyboard.add(f'–ù–∞–∑–∞–¥ üëâüèø')
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ —Ç–µ–º—É', reply_markup=keyboard)
    elif message.text == '–ù–∞–∑–∞–¥ üëâüèø':
        """
        –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        """
        get_command_start(message)
    elif 'Theme' in message.text:
        """
        –ø–æ–ª–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        """
        theme_mess = message.text.split(' - ')[1]
        conn = sqlite3.connect("nominal.sqlite")
        cursor = conn.cursor()
        my_ord = cursor.execute(
            f'''SELECT my_orders FROM orders WHERE id_tg="{message.from_user.id}"''').fetchone()
        json_data = json.loads(my_ord[0])
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for theme in json_data:
            if theme == theme_mess:
                for el in json_data[theme]:
                    for el_2 in el:
                        keyboard.add(f'–ó–∞–∫–∞–∑ {el_2} –∏–∑ —Ç–µ–º—ã {theme_mess}')
        keyboard.add('–ù–∞–∑–∞–¥ üëâüèø')
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –∑–∞–∫–∞–∑', reply_markup=keyboard)
    elif '–ó–∞–∫–∞–∑' in message.text and '—Ç–µ–º—ã' in message.text:
        """
        –ø–æ–ª–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        """
        order = message.text.split()[1]
        theme_mess = message.text.split()[4]
        conn = sqlite3.connect("nominal.sqlite")
        cursor = conn.cursor()
        my_ord = cursor.execute(
            f'''SELECT my_orders FROM orders WHERE id_tg="{message.from_user.id}"''').fetchone()
        json_data = json.loads(my_ord[0])
        list_del = []
        for i in range(len(json_data[theme_mess])):
            if list(json_data[theme_mess][i].items())[0][0] == order:
                list_del.append(list(json_data[theme_mess][i].items())[0][0])
        for i in range(len(json_data[theme_mess])):
            try:
                del json_data[theme_mess][i][list_del[0]]
            except BaseException:
                pass
        for el in json_data[theme_mess]:
            if el == {}:
                index_element_for_del = json_data[theme_mess].index(el)
                del json_data[theme_mess][index_element_for_del]
        cursor.execute(
            f'''UPDATE orders SET my_orders='{json.dumps(json_data)}'  WHERE id_tg="{message.from_user.id}"''')
        conn.commit()
        bot.send_message(message.from_user.id, '–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Ç–µ–º–∞.')
    elif message.text == '–ú–µ–Ω—é üëâüèø':
        get_command_start(message)
    elif message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫—É ü§ñ':
        bot.send_message(message.from_user.id, '–ù–∞—à –∞–¥–º–∏–Ω - @knQzx')


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == 'my_rating':
        """
        –±–µ—Ä—ë–º –∏–∑ –±–¥ —Ä–µ–π—Ç–∏–Ω–≥ —á–µ–ª–∞
        """
        conn = sqlite3.connect("nominal.sqlite")
        cursor = conn.cursor()
        res_2 = cursor.execute(
            f'''SELECT * FROM rating WHERE id_tg="{call.message.chat.id}"''').fetchone()
        history_rating = json.loads(res_2[2])
        text_rate_send = '–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:\n\n'
        for el in history_rating:
            if el == 'reg':
                text_rate_send += f'–î–∞–Ω–æ –±–æ—Ç–æ–º —Ä–µ–π—Ç–∏–Ω–≥–∞ - {history_rating[el]}\n'
            else:
                text_rate_send += f'–î–∞–Ω–æ @{el} —Ä–µ–π—Ç–∏–Ω–≥–∞ - {history_rating[el]}\n'
        """
        –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É –∏ –≤—ã—Å—ã–ª–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        """
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add('–û–±–∂–∞–ª–æ–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ ü§ñ')
        keyboard.add('–ù–∞–∑–∞–¥ üëâüèø')
        bot.send_message(call.message.chat.id, text_rate_send, reply_markup=keyboard)
    elif call.data == 'my_orders':
        """
        –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–¥
        """
        conn = sqlite3.connect("nominal.sqlite")
        cursor = conn.cursor()
        my_ord = cursor.execute(
            f'''SELECT my_orders FROM orders WHERE id_tg="{call.message.chat.id}"''').fetchone()
        if f'{my_ord}' == 'None':
            bot.send_message(call.message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id{call.message.chat.id} '
                                                   f'–Ω–µ –∏–º–µ–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤.')
        else:
            """
            –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑
            """
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add('–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ üéÉ', '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ ü§ñ')
            keyboard.add('–ù–∞–∑–∞–¥ üëâüèø')
            json_data = json.loads(my_ord[0])
            """
            –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ json –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–¥ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–ª—É –∏—Ö
            """
            text = f'–ó–∞–∫–∞–∑—ã –ø—Ä–æ—Ñ–∏–ª—è id{call.message.chat.id}\n\n'
            for theme in json_data:
                text += f'–¢–µ–º–∞: {theme}\n\n'
                for el in json_data[theme]:
                    for el_2 in el:
                        text += f'–ó–∞–∫–∞–∑: {el_2}\n'
                        text += f'–î–µ–¥–ª–∞–π–Ω: {el[el_2]["dedline"]}\n'
                        text += f'–û–ø–ª–∞—Ç–∞: {el[el_2]["pay"]}\n'
                        for response in el[el_2]['responses']:
                            print(response)
                            text += f'–û—Ç–∫–ª–∏–∫: @{response} - {el[el_2]["responses"][response]}\n'
                    text += '\n'
            bot.send_message(call.message.chat.id, text, reply_markup=keyboard)


@bot.message_handler(content_types=['contact'])
def get_contact(message):
    """–ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–¥"""
    conn = sqlite3.connect("nominal.sqlite")
    cursor = conn.cursor()
    res = cursor.execute(f'''SELECT * FROM users WHERE id_tg="{message.from_user.id}"''').fetchone()
    """
    –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, —Ç–æ –µ—Å—Ç—å None,
    —Ç–æ –≤—Å—Ç–∞–≤–ª—è–µ–º
    """
    if res is None:
        """
        –ø–∏—à–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–¥
        –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–º–∏
        """
        conn = sqlite3.connect("nominal.sqlite")
        cursor = conn.cursor()
        name = message.contact.first_name.split()[1]
        surname = message.contact.first_name.split()[0]
        """
        –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–ø–µ—Ä—å –≤ –±–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞,
        –∏ –ø–∏—à–µ–º —á—Ç–æ –±–æ—Ç –¥–∞–ª 4.8 –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        """
        rating_json = json.dumps({"reg": 4.8})
        cursor.execute(f"""INSERT INTO rating VALUES 
                            ('{message.from_user.id}', '4.8', '{rating_json}')
                        """)

        conn.commit()
        """
        –¥–æ–±–∞–≤–∏–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        """
    if str(message.contact.phone_number)[1] in ['7', '8'] or str(message.contact.phone_number)[
        0] in ['7', '8']:
        """
        –¥–µ–ª–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É start
        """
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add('–ù–∞–∑–∞–¥ üëâüèø')
        bot.send_message(message.from_user.id,
                         f'–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç: {message.contact.phone_number}.'
                         f'–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–µ–π –±–∏—Ä–∂–µ–π —Ñ—Ä–∏–ª–∞–Ω—Å–∞ Nominal.',
                         reply_markup=keyboard)
        cursor.execute(f"""INSERT INTO users VALUES 
                            ('{message.from_user.id}', '{name}', '{surname}',
                             '{message.contact.phone_number}', '{message.from_user.username}', 'ru')
                        """)
        conn.commit()
    else:
        """
        –¥–µ–ª–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ù–∞–∑–∞–¥ üëâüèø
        """
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add('–ù–∞–∑–∞–¥ üëâüèø')
        bot.send_message(message.from_user.id,
                         f'I get your contact: {message.contact.phone_number}.'
                         f'Now you have the right to use our Nominal freelance exchange.',
                         reply_markup=keyboard)
        cursor.execute(f"""INSERT INTO users VALUES 
                            ('{message.from_user.id}', '{name}', '{surname}',
                             '{message.contact.phone_number}', '{message.from_user.username}', 'en')
                        """)
        conn.commit()


bot.polling(none_stop=True, interval=0)
