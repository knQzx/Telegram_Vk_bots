import json
import random
import sqlite3

import telebot
from telebot import types

bot = telebot.TeleBot('2032759102:AAHdlvmMDN3d9sGZQNdEVqRXl3r5S5SEGzc')


# TODO: english menu
# TODO: admin menu
# TODO: system rating


@bot.message_handler(commands=['start'])
@bot.message_handler(content_types=['–ú–µ–Ω—é üëâüèø'])
@bot.message_handler(content_types=['–ù–∞–∑–∞–¥ üëâüèø'])
def get_command_start(message):
    """
    –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–¥
    """
    conn = sqlite3.connect("nominal.sqlite")
    cursor = conn.cursor()
    res_1 = cursor.execute(
        f'''SELECT * FROM users WHERE id_tg="{message.from_user.id}"''').fetchone()
    res_2 = cursor.execute(
        f'''SELECT * FROM rating WHERE id_tg="{message.from_user.id}"''').fetchone()
    res_3 = cursor.execute(
        f'''SELECT my_orders FROM orders WHERE id_tg="{message.from_user.id}"''').fetchone()
    res_4 = cursor.execute(
        f'''SELECT completed_orders FROM orders WHERE id_tg="{message.from_user.id}"''').fetchone()
    if res_1 is None:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add('English üéÉ', 'Russian ü§ñ')
        bot.send_message(message.from_user.id, 'Choice your language', reply_markup=keyboard)
        bot.register_next_step_handler(message, send_privacy_policy)
    else:
        keyboard = types.InlineKeyboardMarkup()
        key_take = types.InlineKeyboardButton(text='–°–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã', callback_data='take_order')
        key_my = types.InlineKeyboardButton(text='–ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data='my_orders')
        key_rating = types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞',
                                                callback_data='my_rating')
        keyboard.add(key_take, key_my)
        keyboard.add(key_rating)
        """
        —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ —Å–µ–π—á–∞—Å –Ω–∞—à–∏—Ö
        """
        if res_3 is None:
            my_orders_on_exchange = '0'
        else:
            my_orders_on_exchange = len(res_3)
        """
        —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞—à–∏—Ö
        """
        if res_4 is None:
            my_completed_orders = '0'
        else:
            my_completed_orders = len(res_4)
        text = f'‚ö°Ô∏è–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {res_1[2]} {res_1[1]} ‚ö°\nüî• –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ - {res_2[1]} ‚≠ê\n' \
               f'üôÄ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ - {my_completed_orders}\n' \
               f'üéÉ –í–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ - {my_orders_on_exchange}\n' \
               f'ü§Ø –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ –±–∏—Ä–∂–µ - {random.randint(14, 49)}'
        bot.send_message(message.from_user.id, text, reply_markup=keyboard)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add('–ú–µ–Ω—é üëâüèø')
        keyboard.add('–ù–∞—á–∞—Ç—å —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º üòé')
        keyboard.add('–ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫—É ü§ñ')
        bot.send_message(message.from_user.id, '–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç', reply_markup=keyboard)


def send_privacy_policy(message):
    """
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.text == 'English üéÉ':
        keyboard.add('I do not accept ‚ùå', 'I accept ‚úÖ')
        bot.send_document(message.from_user.id, open('en/privacy_policy.docx', 'rb'),
                          reply_markup=keyboard)
    elif message.text == 'Russian ü§ñ':
        keyboard.add('–ù–µ –ø—Ä–∏–Ω–∏–º–∞—é ‚ùå', '–ü—Ä–∏–Ω–∏–º–∞—é ‚úÖ')
        bot.send_document(message.from_user.id, open('ru/privacy_policy.docx', 'rb'),
                          reply_markup=keyboard)


def create_ask_phone(language):
    """
    –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if language == 'ru':
        key = types.KeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚úÖ', request_contact=True)
        markup.add(key)
    elif language == 'en':
        key = types.KeyboardButton('Share my phone ‚úÖ', request_contact=True)
        markup.add(key)
    return markup


def check_username(message):
    if message.text == '–ú–µ–Ω—é üëâüèø':
        get_command_start(message)
    else:
        username = message.text
        if '@' in username:
            username = username[1:]
        """
        –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–∫ - –º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
        –Ω–∞ True –∏ –¥–µ–ª–∞–µ–º —á–∞—Ç, –µ—Å–ª–∏ False, –∑–Ω–∞—á–∏—Ç –Ω–µ —Å—É–¥—å–±–∞
        """
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
        bot.register_next_step_handler(message, send_message, username)


def send_message(message, username):
    if message.text == '–ú–µ–Ω—é üëâüèø':
        get_command_start(message)
    else:
        conn = sqlite3.connect("nominal.sqlite")
        cursor = conn.cursor()
        my_ord = cursor.execute(
            f'''SELECT id_tg FROM users WHERE username_tg="{username}"''').fetchone()
        try:
            bot.send_message(int(my_ord[0]),
                             f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username}\n'
                             f'–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}')
            bot.send_message(message.from_user.id,
                             f'–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')
        except:
            bot.send_message(message.from_user.id,
                             f'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.')
            return


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    """
    TODO: admin menu
    """
    if message.text == '–ü—Ä–∏–Ω–∏–º–∞—é ‚úÖ':
        bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç! –î–µ–ª–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º :>',
                         reply_markup=create_ask_phone('ru'))
    elif message.text == '–ù–∞—á–∞—Ç—å —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º üòé':
        bot.send_message(message.from_user.id, '–ù—É —á—Ç–æ –∂, –≤–≤–µ–¥–∏ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. '
                                               '–ï—Å–ª–∏ –æ–Ω –ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º —Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ '
                                               '–µ–º—É –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç - —Ç–æ –Ω–µ—Ç. '
                                               '–í–≤–µ–¥–∏ –Ω–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username.')
        bot.register_next_step_handler(message, check_username)
    elif message.text == 'I accept ‚úÖ':
        bot.send_message(message.from_user.id, 'Hi! Can you send me your contact? :>',
                         reply_markup=create_ask_phone('en'))
    elif message.text == '–û–±–∂–∞–ª–æ–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ ü§ñ':
        """
        –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        """
        bot.send_message(message.from_user.id, '–ù–∞—à –∞–¥–º–∏–Ω - @knQzx')
    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ ü§ñ':
        global msge
        keyboard = types.InlineKeyboardMarkup()
        key_1 = types.InlineKeyboardButton(text='Web ‚ö°Ô∏è', callback_data='th_1')
        key_2 = types.InlineKeyboardButton(text='Telegram –±–æ—Ç—ã üñ•', callback_data='th_2')
        key_3 = types.InlineKeyboardButton(text='–í–∫ –±–æ—Ç—ã üî•', callback_data='th_3')
        key_4 = types.InlineKeyboardButton(text='–°–∫—Ä–∏–ø—Ç—ã üíª', callback_data='th_4')
        key_5 = types.InlineKeyboardButton(text='–í–∑–ª–æ–º —Ö–∞–∫–∏–Ω–≥ üí•', callback_data='th_5')
        key_6 = types.InlineKeyboardButton(text='–ü—Ä–æ–µ–∫—Ç—ã –¥–ª—è —à–∫–æ–ª—ã ‚ú®', callback_data='th_6')
        keyboard.add(key_1, key_2)
        keyboard.add(key_3, key_4)
        keyboard.add(key_5, key_6)
        msge = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–µ–º—É –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç '
                                                      '—Ä–∞—Å–ø–æ–ª–æ–≥–∞—Ç—å—Å—è –≤–∞—à –∑–∞–∫–∞–∑',
                                reply_markup=keyboard)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(f'–ù–∞–∑–∞–¥ üëâüèø')
        bot.send_message(message.from_user.id, '–ï—Å–ª–∏ –∑–∞ –≤–∞–º–∏ –±—É–¥–µ—Ç –∑–∞–º–µ—á–µ–Ω —Å–ø–∞–º –∏ —Ñ–ª—É–¥ - '
                                               '–≤—ã –±—É–¥–µ—Ç–µ –∑–∞–±–∞–Ω–µ–Ω—ã', reply_markup=keyboard)
    elif message.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ üéÉ':
        """
        –ø–æ–ª–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —Ç–µ–º—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        """
        conn = sqlite3.connect("nominal.sqlite")
        cursor = conn.cursor()
        my_ord = cursor.execute(
            f'''SELECT my_orders FROM orders WHERE id_tg="{message.from_user.id}"''').fetchone()
        json_data = json.loads(my_ord[0])
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        i = 1
        for theme in json_data:
            keyboard.add(f'Theme {i} - {theme}')
            i += 1
        keyboard.add(f'–ù–∞–∑–∞–¥ üëâüèø')
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ —Ç–µ–º—É', reply_markup=keyboard)
    elif message.text == '–ù–∞–∑–∞–¥ üëâüèø':
        """
        –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        """
        get_command_start(message)
    elif 'Theme' in message.text:
        """
        –ø–æ–ª–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        """
        theme_mess = message.text.split(' - ')[1]
        conn = sqlite3.connect("nominal.sqlite")
        cursor = conn.cursor()
        my_ord = cursor.execute(
            f'''SELECT my_orders FROM orders WHERE id_tg="{message.from_user.id}"''').fetchone()
        json_data = json.loads(my_ord[0])
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for theme in json_data:
            if theme == theme_mess:
                for el in json_data[theme]:
                    for el_2 in el:
                        keyboard.add(f'–ó–∞–∫–∞–∑ {el_2} –∏–∑ —Ç–µ–º—ã {theme_mess}')
        keyboard.add('–ù–∞–∑–∞–¥ üëâüèø')
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –∑–∞–∫–∞–∑', reply_markup=keyboard)
    elif '–ó–∞–∫–∞–∑' in message.text and '—Ç–µ–º—ã' in message.text:
        """
        –ø–æ–ª–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        """
        order = ' '.join(message.text.split()[1:message.text.split().index('–∏–∑')])
        theme_mess = ' '.join(message.text.split()[message.text.split().index('—Ç–µ–º—ã') + 1:])
        print(theme_mess, order)
        conn = sqlite3.connect("nominal.sqlite")
        cursor = conn.cursor()
        my_ord = cursor.execute(
            f'''SELECT my_orders FROM orders WHERE id_tg="{message.from_user.id}"''').fetchone()
        json_data = json.loads(my_ord[0])
        list_del = []
        for i in range(len(json_data[theme_mess])):
            if list(json_data[theme_mess][i].items())[0][0] == order:
                list_del.append(list(json_data[theme_mess][i].items())[0][0])
        for i in range(len(json_data[theme_mess])):
            try:
                del json_data[theme_mess][i][list_del[0]]
            except BaseException:
                pass
        for el in json_data[theme_mess]:
            if el == {}:
                index_element_for_del = json_data[theme_mess].index(el)
                del json_data[theme_mess][index_element_for_del]
        cursor.execute(
            f'''UPDATE orders SET my_orders='{json.dumps(json_data)}'  WHERE id_tg="{message.from_user.id}"''')
        conn.commit()
        bot.send_message(message.from_user.id, '–£–¥–∞–ª–µ–Ω–æ.')
        get_command_start(message)
    elif message.text == '–ú–µ–Ω—é üëâüèø':
        get_command_start(message)
    elif message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫—É ü§ñ':
        bot.send_message(message.from_user.id, '–ù–∞—à –∞–¥–º–∏–Ω - @knQzx')


def add_response_from(message, dict_data, theme):
    if message.text == '–ú–µ–Ω—é üëâüèø':
        get_command_start(message)
    else:
        """
        —Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        conn = sqlite3.connect("nominal.sqlite")
        cursor = conn.cursor()
        my_ord = cursor.execute(
            f'''SELECT * FROM orders''').fetchall()
        for i in range(len(my_ord)):
            if f'{dict_data}' in f'{(json.loads(my_ord[i][1]))}':
                new_json = (json.loads(my_ord[i][1]))
                for theme in new_json:
                    if dict_data in new_json[theme]:
                        index = ((new_json[theme]).index(dict_data))
                        for el in dict_data: dict_data[el]['responses'][
                            f"{message.from_user.username}"] = message.text
                        print(dict_data)
                        new_json[theme][index] = dict_data
                        print(new_json)
                        """
                        –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã—Ö–æ–¥–∏–º
                        """
                        conn = sqlite3.connect("nominal.sqlite")
                        cursor = conn.cursor()
                        cursor.execute(
                            f"""UPDATE orders 
                                SET my_orders='{json.dumps(new_json)}'
                                WHERE id_tg='{message.from_user.id}'""")
                        conn.commit()
                        bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–∫–ª–∏–∫ –ø—Ä–∏–Ω—è—Ç')
                        return


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    global id_last_order, theme, full_datas, number_order, last_number_order
    if call.data == 'take_order':
        """
        –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—á—Ç–∏ –≤—Å–µ—Ö –±–¥
        """
        keyboard = types.InlineKeyboardMarkup()
        key_1 = types.InlineKeyboardButton(text='Web ‚ö°Ô∏è', callback_data='ord_1')
        key_2 = types.InlineKeyboardButton(text='Telegram –±–æ—Ç—ã üñ•', callback_data='ord_2')
        key_3 = types.InlineKeyboardButton(text='–í–∫ –±–æ—Ç—ã üî•', callback_data='ord_3')
        key_4 = types.InlineKeyboardButton(text='–°–∫—Ä–∏–ø—Ç—ã üíª', callback_data='ord_4')
        key_5 = types.InlineKeyboardButton(text='–í–∑–ª–æ–º —Ö–∞–∫–∏–Ω–≥ üí•', callback_data='ord_5')
        key_6 = types.InlineKeyboardButton(text='–ü—Ä–æ–µ–∫—Ç—ã –¥–ª—è —à–∫–æ–ª—ã ‚ú®', callback_data='ord_6')
        keyboard.add(key_1, key_2)
        keyboard.add(key_3, key_4)
        keyboard.add(key_5, key_6)
        ms = bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–µ–º—É –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç '
                                                    '—Ä–∞—Å–ø–æ–ª–æ–≥–∞—Ç—å—Å—è –≤–∞—à –∑–∞–∫–∞–∑',
                              reply_markup=keyboard)
        id_last_order = ms.id
    elif 'key_response' in call.data:
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∫–ª–∏–∫–∞')
        bot.register_next_step_handler(call.message, add_response_from,
                                       full_datas[int(call.data.split('_')[2])], theme)
    elif 'ord' in call.data and call.data != 'my_orders':
        if call.data == 'ord_1':
            theme = 'Web ‚ö°Ô∏è'
        elif call.data == 'ord_2':
            theme = 'Telegram –±–æ—Ç—ã üñ•'
        elif call.data == 'ord_3':
            theme = '–í–∫ –±–æ—Ç—ã üî•'
        elif call.data == 'ord_4':
            theme = '–°–∫—Ä–∏–ø—Ç—ã üíª'
        elif call.data == 'ord_5':
            theme = '–í–∑–ª–æ–º —Ö–∞–∫–∏–Ω–≥ üí•'
        elif call.data == 'ord_6':
            theme = '–ü—Ä–æ–µ–∫—Ç—ã –¥–ª—è —à–∫–æ–ª—ã ‚ú®'
        """
        –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–¥
        """
        conn = sqlite3.connect("nominal.sqlite")
        cursor = conn.cursor()
        """
        –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã–µ –≥–¥–µ –Ω–∞—à–∞ —Ç–µ–º–∞
        """
        list_data = []
        full_data = {}
        """
        –Ω–∞—à —Å–ø–∏—Å–æ–∫ –∫—É–¥–∞ –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å
        """
        res_3 = cursor.execute(
            f'''SELECT my_orders FROM orders''').fetchall()
        for el in res_3:
            json_data = json.loads(el[0])
            for themes in json_data:
                if theme == themes:
                    if json_data[theme]:
                        list_data.append(json_data[theme])
        k = 1
        for el in list_data:
            for _ in el:
                full_data[k] = _
                k += 1
        full_datas = full_data
        """
        –µ—Å–ª–∏ –≤ —ç—Ç–æ–π —Ç–µ–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
        —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
        """
        if full_datas == {}:
            bot.send_message(call.message.chat.id, '–í —ç—Ç–æ–π —Ç–µ–º–µ –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ—Ç(((')
            return
        """
        —Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–∂–¥–æ–≥–æ
        –∑–∞–∫–∞–∑–∞ —Ç–µ–º—ã –∫–æ—Ç–æ—Ä—É—é 
        –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 
        """
        """
        —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É,
        –∑–∞–ø–∏—Å—ã–≤–∞–µ–º id –∫–∞–∂–¥–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞,
        –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ '–æ—Ç–∫–ª–∏–∫'
        """
        number_order = 1
        last_number_order = k
        keyboard = types.InlineKeyboardMarkup()
        key_response = types.InlineKeyboardButton(text=f'–û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑',
                                                  callback_data=f'key_response_{number_order}')
        key_left = types.InlineKeyboardButton(text='‚¨ÖÔ∏è',
                                              callback_data=f'key_left_{number_order - 1}')
        key_number = types.InlineKeyboardButton(text=f'{number_order}/{last_number_order - 1}',
                                                callback_data='key_number')
        key_right = types.InlineKeyboardButton(text='‚û°Ô∏è',
                                               callback_data=f'key_right_{number_order + 1}')
        key_back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='key_back_menu')
        keyboard.add(key_response)
        keyboard.add(key_left, key_number, key_right)
        keyboard.add(key_back)
        """
        —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —ç—Ç–æ
        """
        for name in full_datas[number_order]:
            text_caption = f'–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {name}\n'
            text_caption += f'–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {full_datas[number_order][name]["description"]}\n'
            text_caption += f'–î–µ–¥–ª–∞–π–Ω –∑–∞–∫–∞–∑–∞: {full_datas[number_order][name]["dedline"]}\n'
            text_caption += f'–û–ø–ª–∞—Ç–∞: {full_datas[number_order][name]["pay"]}\n'
            if full_datas[number_order][name]["responses"] != {}:
                for response_name in full_datas[number_order][name]["responses"]:
                    text_caption += f'–û—Ç–∫–ª–∏–∫ @{response_name} - {full_datas[number_order][name]["responses"][response_name]}\n'
        bot.send_photo(call.message.chat.id, caption=text_caption,
                       photo=open('ru/code.png', mode='rb'),
                       reply_markup=keyboard)
        id_last_order = call.message.id
    elif 'key_left' in call.data:
        number_order -= 1
        if call.data.split('_')[2] == '0':
            number_order = last_number_order - 1
        keyboard = types.InlineKeyboardMarkup()
        key_response = types.InlineKeyboardButton(text=f'–û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑',
                                                  callback_data=f'key_response_{number_order}')
        key_left = types.InlineKeyboardButton(text='‚¨ÖÔ∏è',
                                              callback_data=f'key_left_{number_order - 1}')
        key_number = types.InlineKeyboardButton(text=f'{number_order}/{last_number_order - 1}',
                                                callback_data='key_number')
        key_right = types.InlineKeyboardButton(text='‚û°Ô∏è',
                                               callback_data=f'key_right_{number_order + 1}')
        key_back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='key_back_menu')
        keyboard.add(key_response)
        keyboard.add(key_left, key_number, key_right)
        keyboard.add(key_back)
        """
        —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —ç—Ç–æ
        """
        for name in full_datas[number_order]:
            text_caption = f'–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {name}\n'
            text_caption += f'–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {full_datas[number_order][name]["description"]}\n'
            text_caption += f'–î–µ–¥–ª–∞–π–Ω –∑–∞–∫–∞–∑–∞: {full_datas[number_order][name]["dedline"]}\n'
            text_caption += f'–û–ø–ª–∞—Ç–∞: {full_datas[number_order][name]["pay"]}\n'
            if full_datas[number_order][name]["responses"] != {}:
                for response_name in full_datas[number_order][name]["responses"]:
                    text_caption += f'–û—Ç–∫–ª–∏–∫ @{response_name} - {full_datas[number_order][name]["responses"][response_name]}\n'
        bot.delete_message(call.message.chat.id, id_last_order + 1)
        bot.send_photo(call.message.chat.id, caption=text_caption,
                       photo=open('ru/code.png', mode='rb'),
                       reply_markup=keyboard)
        id_last_order = call.message.id
    elif 'key_right' in call.data:
        number_order += 1
        if call.data.split('_')[2] == str(last_number_order):
            print(call.data.split('_'))
            number_order = 1
        keyboard = types.InlineKeyboardMarkup()
        key_response = types.InlineKeyboardButton(text=f'–û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑',
                                                  callback_data=f'key_response_{number_order}')
        key_left = types.InlineKeyboardButton(text='‚¨ÖÔ∏è',
                                              callback_data=f'key_left_{number_order - 1}')
        key_number = types.InlineKeyboardButton(text=f'{number_order}/{last_number_order - 1}',
                                                callback_data='key_number')
        key_right = types.InlineKeyboardButton(text='‚û°Ô∏è',
                                               callback_data=f'key_right_{number_order + 1}')
        key_back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='key_back_menu')
        keyboard.add(key_response)
        keyboard.add(key_left, key_number, key_right)
        keyboard.add(key_back)
        """
        —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —ç—Ç–æ
        """
        for name in full_datas[number_order]:
            text_caption = f'–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {name}\n'
            text_caption += f'–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {full_datas[number_order][name]["description"]}\n'
            text_caption += f'–î–µ–¥–ª–∞–π–Ω –∑–∞–∫–∞–∑–∞: {full_datas[number_order][name]["dedline"]}\n'
            text_caption += f'–û–ø–ª–∞—Ç–∞: {full_datas[number_order][name]["pay"]}\n'
            if full_datas[number_order][name]["responses"] != {}:
                for response_name in full_datas[number_order][name]["responses"]:
                    text_caption += f'–û—Ç–∫–ª–∏–∫ @{response_name} - {full_datas[number_order][name]["responses"][response_name]}\n'
        bot.delete_message(call.message.chat.id, id_last_order + 1)
        bot.send_photo(call.message.chat.id, caption=text_caption,
                       photo=open('ru/code.png', mode='rb'),
                       reply_markup=keyboard)
        id_last_order = call.message.id
    elif call.data == 'my_rating':
        """
        –±–µ—Ä—ë–º –∏–∑ –±–¥ —Ä–µ–π—Ç–∏–Ω–≥ —á–µ–ª–∞
        """
        conn = sqlite3.connect("nominal.sqlite")
        cursor = conn.cursor()
        res_2 = cursor.execute(
            f'''SELECT * FROM rating WHERE id_tg="{call.message.chat.id}"''').fetchone()
        history_rating = json.loads(res_2[2])
        text_rate_send = '–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:\n\n'
        for el in history_rating:
            if el == 'reg':
                text_rate_send += f'–î–∞–Ω–æ –±–æ—Ç–æ–º —Ä–µ–π—Ç–∏–Ω–≥–∞ - {history_rating[el]}\n'
            else:
                text_rate_send += f'–î–∞–Ω–æ @{el} —Ä–µ–π—Ç–∏–Ω–≥–∞ - {history_rating[el]}\n'
        """
        –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É –∏ –≤—ã—Å—ã–ª–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        """
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add('–û–±–∂–∞–ª–æ–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ ü§ñ')
        keyboard.add('–ù–∞–∑–∞–¥ üëâüèø')
        bot.send_message(call.message.chat.id, text_rate_send, reply_markup=keyboard)
    elif call.data == 'my_orders':
        """
        –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–¥
        """
        conn = sqlite3.connect("nominal.sqlite")
        cursor = conn.cursor()
        my_ord = cursor.execute(
            f'''SELECT my_orders FROM orders WHERE id_tg="{call.message.chat.id}"''').fetchone()
        if f'{my_ord}' == 'None':
            bot.send_message(call.message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id{call.message.chat.id} '
                                                   f'–Ω–µ –∏–º–µ–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤.')
        else:
            """
            –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑
            """
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add('–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ üéÉ', '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ ü§ñ')
            keyboard.add('–ù–∞–∑–∞–¥ üëâüèø')
            json_data = json.loads(my_ord[0])
            """
            –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ json –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–¥ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–ª—É –∏—Ö
            """
            text = f'–ó–∞–∫–∞–∑—ã –ø—Ä–æ—Ñ–∏–ª—è id{call.message.chat.id}\n\n'
            for theme in json_data:
                text += f'–¢–µ–º–∞: {theme}\n\n'
                for el in json_data[theme]:
                    for el_2 in el:
                        text += f'–ó–∞–∫–∞–∑: {el_2}\n'
                        text += f'–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {el[el_2]["description"]}\n'
                        text += f'–î–µ–¥–ª–∞–π–Ω: {el[el_2]["dedline"]}\n'
                        text += f'–û–ø–ª–∞—Ç–∞: {el[el_2]["pay"]}\n'
                        for response in el[el_2]['responses']:
                            print(response)
                            text += f'–û—Ç–∫–ª–∏–∫: @{response} - {el[el_2]["responses"][response]}\n'
                    text += '\n'
            bot.send_message(call.message.chat.id, text, reply_markup=keyboard)
    elif call.data in ['th_1', 'th_2', 'th_3', 'th_4', 'th_5', 'th_6']:
        if call.data == 'th_1':
            theme = 'Web ‚ö°Ô∏è'
        elif call.data == 'th_2':
            theme = 'Telegram –±–æ—Ç—ã üñ•'
        elif call.data == 'th_3':
            theme = '–í–∫ –±–æ—Ç—ã üî•'
        elif call.data == 'th_4':
            theme = '–°–∫—Ä–∏–ø—Ç—ã üíª'
        elif call.data == 'th_5':
            theme = '–í–∑–ª–æ–º —Ö–∞–∫–∏–Ω–≥ üí•'
        elif call.data == 'th_6':
            theme = '–ü—Ä–æ–µ–∫—Ç—ã –¥–ª—è —à–∫–æ–ª—ã ‚ú®'
        bot.send_message(call.message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞')
        bot.register_next_step_handler(call.message, title_order, theme)


def title_order(message, theme):
    dict_ = {}
    if message.text == '–ù–∞–∑–∞–¥ üëâüèø':
        get_command_start(message)
    else:
        name_theme = [message.text, theme]
        dict_ = {message.text: {}}
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É')
        bot.register_next_step_handler(message, description_order, dict_, name_theme)


def description_order(message, dict_, name_theme):
    if message.text == '–ù–∞–∑–∞–¥ üëâüèø':
        get_command_start(message)
    else:
        name = name_theme[0]
        dict_[name]['description'] = message.text
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞')
        bot.register_next_step_handler(message, dedline_order, dict_, name_theme)


def dedline_order(message, dict_, name_theme):
    if message.text == '–ù–∞–∑–∞–¥ üëâüèø':
        get_command_start(message)
    else:
        name = name_theme[0]
        dict_[name]['dedline'] = message.text
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É, –∫ –ø—Ä–∏–º–µ—Ä—É - 1000—Ä—É–±')
        bot.register_next_step_handler(message, pay_order, dict_, name_theme)


def pay_order(message, dict_, name_theme):
    if message.text == '–ù–∞–∑–∞–¥ üëâüèø':
        get_command_start(message)
    else:
        """
        –ø–æ–ª–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        """
        conn = sqlite3.connect("nominal.sqlite")
        cursor = conn.cursor()
        my_ord = cursor.execute(
            f'''SELECT my_orders FROM orders WHERE id_tg="{message.from_user.id}"''').fetchone()
        json_data = json.loads(my_ord[0])
        #
        name = name_theme[0]
        dict_[name]['pay'] = message.text
        dict_[name]['responses'] = {}
        """
        –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–º–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        """
        for themes in json_data:
            if themes == name_theme[1]:
                json_data[themes].append(dict_)
                """
                –æ–±–Ω–æ–≤–ª—è–µ–º –±–¥
                """
                cursor.execute(
                    f"""UPDATE orders 
                        SET my_orders='{json.dumps(json_data)}'
                        WHERE id_tg='{message.from_user.id}'""")
                conn.commit()
                bot.send_message(message.from_user.id, '–î–æ–±–∞–≤–ª–µ–Ω–æ')
                get_command_start(message)
                return
        """
        –µ—Å–ª–∏ —ç—Ç–æ–π —Ç–µ–º—ã –µ—â—ë –Ω–µ—Ç 
        —Ç–æ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º
        –≤ –Ω–µ—ë –¥–∞–Ω–Ω—ã–µ
        """
        json_data[name_theme[1]] = [dict_]
        """
        –æ–±–Ω–æ–≤–ª—è–µ–º –±–¥
        """
        cursor.execute(
            f"""UPDATE orders 
                SET my_orders='{json.dumps(json_data)}'
                WHERE id_tg='{message.from_user.id}'""")
        conn.commit()
        bot.send_message(message.from_user.id, '–î–æ–±–∞–≤–ª–µ–Ω–æ')
        get_command_start(message)


@bot.message_handler(content_types=['contact'])
def get_contact(message):
    """–ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–¥"""
    conn = sqlite3.connect("nominal.sqlite")
    cursor = conn.cursor()
    res = cursor.execute(f'''SELECT * FROM users WHERE id_tg="{message.from_user.id}"''').fetchone()
    """
    –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, —Ç–æ –µ—Å—Ç—å None,
    —Ç–æ –≤—Å—Ç–∞–≤–ª—è–µ–º
    """
    if res is None:
        """
        –ø–∏—à–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–¥
        –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–º–∏
        """
        conn = sqlite3.connect("nominal.sqlite")
        cursor = conn.cursor()
        name = message.contact.first_name.split()[1]
        surname = message.contact.first_name.split()[0]
        """
        –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–ø–µ—Ä—å –≤ –±–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞,
        –∏ –ø–∏—à–µ–º —á—Ç–æ –±–æ—Ç –¥–∞–ª 4.8 –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        """
        rating_json = json.dumps({"reg": 4.8})
        cursor.execute(f"""INSERT INTO rating VALUES 
                            ('{message.from_user.id}', '4.8', '{rating_json}')
                        """)

        conn.commit()
        """
        –¥–æ–±–∞–≤–∏–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        """
    if str(message.contact.phone_number)[1] in ['7', '8'] or str(message.contact.phone_number)[
        0] in ['7', '8']:
        """
        –¥–µ–ª–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É start
        """
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add('–ù–∞–∑–∞–¥ üëâüèø')
        bot.send_message(message.from_user.id,
                         f'–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç: {message.contact.phone_number}.'
                         f'–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–µ–π –±–∏—Ä–∂–µ–π —Ñ—Ä–∏–ª–∞–Ω—Å–∞ Nominal.',
                         reply_markup=keyboard)
        cursor.execute(f"""INSERT INTO users VALUES 
                            ('{message.from_user.id}', '{name}', '{surname}',
                             '{message.contact.phone_number}', '{message.from_user.username}', 'ru')
                        """)
        conn.commit()
    else:
        """
        –¥–µ–ª–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ù–∞–∑–∞–¥ üëâüèø
        """
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add('–ù–∞–∑–∞–¥ üëâüèø')
        bot.send_message(message.from_user.id,
                         f'I get your contact: {message.contact.phone_number}.'
                         f'Now you have the right to use our Nominal freelance exchange.',
                         reply_markup=keyboard)
        cursor.execute(f"""INSERT INTO users VALUES 
                            ('{message.from_user.id}', '{name}', '{surname}',
                             '{message.contact.phone_number}', '{message.from_user.username}', 'en')
                        """)
        conn.commit()


bot.polling(none_stop=True, interval=0)
